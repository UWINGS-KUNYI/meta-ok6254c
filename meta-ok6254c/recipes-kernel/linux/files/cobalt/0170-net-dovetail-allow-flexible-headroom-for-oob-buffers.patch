From 86cffde6e32a241c9bd271b55f62d8fc28939043 Mon Sep 17 00:00:00 2001
From: Philippe Gerum <rpm@xenomai.org>
Date: Fri, 22 Jul 2022 17:00:10 +0200
Subject: [PATCH 170/179] net: dovetail: allow flexible headroom for oob
 buffers

Signed-off-by: Philippe Gerum <rpm@xenomai.org>
---
 include/linux/skbuff.h |  6 ++++--
 net/core/skbuff.c      | 14 +++++++++-----
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 4c9afe3e2..97bde8a06 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -1104,9 +1104,11 @@ static inline bool skb_has_oob_clone(const struct sk_buff *skb)
 }
 
 struct sk_buff *__netdev_alloc_oob_skb(struct net_device *dev,
-				       size_t len, gfp_t gfp_mask);
+				size_t len, size_t headroom,
+				gfp_t gfp_mask);
 void __netdev_free_oob_skb(struct net_device *dev, struct sk_buff *skb);
-void netdev_reset_oob_skb(struct net_device *dev, struct sk_buff *skb);
+void netdev_reset_oob_skb(struct net_device *dev, struct sk_buff *skb,
+			size_t headroom);
 struct sk_buff *skb_alloc_oob_head(gfp_t gfp_mask);
 void skb_morph_oob_skb(struct sk_buff *n, struct sk_buff *skb);
 bool skb_release_oob_skb(struct sk_buff *skb, int *dref);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index ac48588e2..1cfa53f77 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -292,16 +292,18 @@ static struct sk_buff *__build_skb_around(struct sk_buff *skb,
 
 #ifdef CONFIG_NET_OOB
 
-struct sk_buff *__netdev_alloc_oob_skb(struct net_device *dev, size_t len, gfp_t gfp_mask)
+struct sk_buff *__netdev_alloc_oob_skb(struct net_device *dev, size_t len,
+				size_t headroom, gfp_t gfp_mask)
 {
 	struct sk_buff *skb;
 
-	skb = __alloc_skb(len + NET_SKB_PAD, gfp_mask,
+	headroom = ALIGN(NET_SKB_PAD + headroom, NET_SKB_PAD);
+	skb = __alloc_skb(len + headroom, gfp_mask,
 			SKB_ALLOC_RX, NUMA_NO_NODE);
 	if (!skb)
 		return NULL;
 
-	skb_reserve(skb, NET_SKB_PAD);
+	skb_reserve(skb, headroom);
 	skb->dev = dev;
 	skb->oob = true;
 
@@ -317,7 +319,8 @@ void __netdev_free_oob_skb(struct net_device *dev, struct sk_buff *skb)
 }
 EXPORT_SYMBOL_GPL(__netdev_free_oob_skb);
 
-void netdev_reset_oob_skb(struct net_device *dev, struct sk_buff *skb)
+void netdev_reset_oob_skb(struct net_device *dev, struct sk_buff *skb,
+			size_t headroom)
 {
 	unsigned char *data = skb->head; /* Always from kmalloc_reserve(). */
 
@@ -326,7 +329,8 @@ void netdev_reset_oob_skb(struct net_device *dev, struct sk_buff *skb)
 
 	memset(skb, 0, offsetof(struct sk_buff, tail));
 	__build_skb_around(skb, data, 0);
-	skb_reserve(skb, NET_SKB_PAD);
+	headroom = ALIGN(NET_SKB_PAD + headroom, NET_SKB_PAD);
+	skb_reserve(skb, headroom);
 	skb->oob = true;
 	skb->dev = dev;
 }
-- 
2.38.1

